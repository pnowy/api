plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'com.google.cloud.tools.jib' version '2.1.0'
	id 'pl.allegro.tech.build.axion-release' version '1.11.0'
	id 'java'
}

group = 'com.github.pnowy.spring'
version = scmVersion.version
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'com.google.guava:guava:28.2-jre'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	compileOnly 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

project.ext {
	stabilityTag = version.contains("SNAPSHOT") ? "snapshot": "release"
}

// alternative way to build images if you don't want to use Dockerfile
// ./gradlew jibDockerBuild -> local context only
// ./gradlew jib -> build && push
jib {
	to {
		image = "pnowy/spring-boot-api"
		tags = [project.version, stabilityTag]
		auth {
			username = System.getenv("DOCKERHUB_USERNAME")
			password = System.getenv("DOCKERHUB_PASSWORD")
		}
	}
	container {
		jvmFlags = ["-Djava.net.preferIPv4Stack=true", "-Djava.security.egd=file:/dev/./urandom", "-XX:InitialRAMPercentage=50", "-XX:MaxRAMPercentage=75", "-XX:+ExitOnOutOfMemoryError",]
		ports = ['8080', '8081']
		environment = [
			SPRING_OUTPUT_ANSI_ENABLED: 'ALWAYS'
		]
		creationTime = 'USE_CURRENT_TIMESTAMP'
		labels = [maintainer: 'pnowy']
	}
}